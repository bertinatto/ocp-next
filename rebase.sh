#!/bin/bash

set -eo pipefail

main() {
    local local_branch="ocp-next"
    local upstream_branch="upstream/master"
    local should_update=false
    local should_push=false

    while getopts "l:u:g:p:" opt; do
        case $opt in
            l)
                local_branch=${OPTARG}
                ;;
            u)
                upstream_branch=${OPTARG}
                ;;
            g)
                should_update=${OPTARG}
                ;;
            p)
                should_push=${OPTARG}
                ;;
	    *)
		true # Do nothing
		;;
        esac
    done

    setup_go
    setup_git
    clone_upstream_repo
    # The remaining commands are meant to run inside the kubernetes directory, so enter it
    pushd kubernetes || exit 1
    add_openshift_remote
    add_pr_remote
    create_local_branch "$local_branch" "$upstream_branch"
    merge_openshift_master
    apply_patches
    if $should_update; then
	update_dependencies "$local_branch"
	update_vendor
        update_generated
    fi
    if $should_push; then
        push
    fi
    popd
}

setup_go() {
    # Configure go like our CI
    eval "$(gimme 1.20.3)"
    export FORCE_HOST_GO=1
    # export GOFLAGS=-mod=vendor
}

setup_git() {
    git config --global user.email "fbertina@redhat.com"
    git config --global user.name "Fabio Bertinatto"
}

clone_upstream_repo() {
    # Clone upstream repo, if it doesn't exist yet
    git clone --origin upstream "https://github.com/kubernetes/kubernetes.git" || true
    # Make sure we have the latest code from master
    pushd kubernetes || exit 1
    git fetch upstream
    popd
}

add_openshift_remote() {
    # Add openshift remote and make sure it's updated
    git remote add openshift "https://github.com/openshift/kubernetes.git" || true
    git fetch openshift master
    gh repo set-default openshift/kubernetes
}

add_pr_remote(){
    git remote add origin "git@github.com:bertinatto/kubernetes.git" || true
}

create_local_branch() {
    local local_branch="$1"
    local upstream_branch="$2"
    # Make sure the repo is clean
    git clean -fd && git checkout -- . 
    git checkout -B "$local_branch" "$upstream_branch"
}

merge_openshift_master() {
    git merge -s ours --no-edit openshift/master
}

apply_patches() {
    local patch
    echo "Starting to apply patches"
    for patch in ../patches/*.patch; do
        if ! git am --3way "$patch"; then
            echo "Failed to apply $patch"
	    exit 1
        else
            echo "Successfully applied $patch"
        fi
    done
}

update_dependencies() {
    local local_branch="$1"
    GOPROXY=direct hack/pin-dependency.sh github.com/onsi/ginkgo/v2=github.com/openshift/onsi-ginkgo/v2 v2.9-openshift-4.15
    GOPROXY=direct hack/pin-dependency.sh github.com/openshift/api=github.com/bertinatto/api "$local_branch"
    GOPROXY=direct hack/pin-dependency.sh github.com/openshift/client-go=github.com/bertinatto/client-go "$local_branch"
    GOPROXY=direct hack/pin-dependency.sh github.com/openshift/library-go=github.com/bertinatto/library-go "$local_branch"
    GOPROXY=direct hack/pin-dependency.sh github.com/openshift/apiserver-library-go=github.com/bertinatto/apiserver-library-go "$local_branch"
}

update_vendor() {
    # hack/update-vendor.sh
    podman run -it --rm -v $( pwd ):/go/k8s.io/kubernetes:Z --workdir=/go/k8s.io/kubernetes registry.ci.openshift.org/openshift/release:rhel-8-release-golang-1.20-openshift-4.14 bash -c 'OS_RUN_WITHOUT_DOCKER=yes FORCE_HOST_GO=1 hack/update-vendor.sh'
    git add .
    git commit -m "UPSTREAM: <drop>: hack/update-vendor.sh"
}

update_generated() {
    eval "$(hack/install-etcd.sh | grep "export PATH")"
    # make clean && make update
    make clean
    podman run -it --rm -v $( pwd ):/go/k8s.io/kubernetes:Z --workdir=/go/k8s.io/kubernetes registry.ci.openshift.org/openshift/release:rhel-8-release-golang-1.20-openshift-4.14 bash -c 'export PATH="/go/k8s.io/kubernetes/third_party/etcd:${PATH}" && OS_RUN_WITHOUT_DOCKER=yes FORCE_HOST_GO=1 make update'
    git add .
    git commit -m "UPSTREAM: <drop>: make update"
}

push() {
    git push origin -u HEAD -f
    # gh pr create --fill --draft --repo openshift/kubernetes --base master --title "[WIP]: Update to Kubernetes \"$upstream_branch\"" --body "Auto-generated by https://github.com/bertinatto/ocp-next." || true
    # echo "Giving GitHub a few seconds to react to the new push"
    # sleep 10
#     gh pr comment 1614 --body "
# /test images
# /test artifacts
# /test verify
# /test unit
# /test integration
# /test e2e-aws-csi
# /test k8s-e2e-gcp-ovn"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    main "$@"
fi
