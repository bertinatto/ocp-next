From d6db6f7db353c32a95f80098c4009a65ceb18382 Mon Sep 17 00:00:00 2001
From: "Dr. Stefan Schimanski" <stefan.schimanski@gmail.com>
Date: Thu, 29 Oct 2020 13:55:58 +0100
Subject: [PATCH] UPSTREAM: <carry>: warn only about unknown feature gates

OpenShift-Rebase-Source: a1370096b39
---
 .../apis/config/validation/validation_test.go  |  4 +++-
 .../component-base/featuregate/feature_gate.go |  5 ++---
 .../featuregate/feature_gate_test.go           | 18 +++++++++++-------
 .../featuregate/registry_test.go               |  2 +-
 4 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/pkg/kubelet/apis/config/validation/validation_test.go b/pkg/kubelet/apis/config/validation/validation_test.go
index a8bcabf8553..fdfe74c8acc 100644
--- a/pkg/kubelet/apis/config/validation/validation_test.go
+++ b/pkg/kubelet/apis/config/validation/validation_test.go
@@ -722,7 +722,9 @@ func TestValidateKubeletConfiguration(t *testing.T) {
 				conf.FeatureGates["invalid"] = true
 				return conf
 			},
-			errMsg: "unrecognized feature gate: invalid",
+			// In OpenShift we need to tolerate unrecognized feature gates
+			// errMsg: "unrecognized feature gate: invalid",
+			errMsg: "",
 		},
 	}
 
diff --git a/staging/src/k8s.io/component-base/featuregate/feature_gate.go b/staging/src/k8s.io/component-base/featuregate/feature_gate.go
index b6f08a6cd6a..416aafc71f9 100644
--- a/staging/src/k8s.io/component-base/featuregate/feature_gate.go
+++ b/staging/src/k8s.io/component-base/featuregate/feature_gate.go
@@ -327,9 +327,8 @@ func (f *featureGate) unsafeSetFromMap(enabled map[Feature]bool, m map[string]bo
 		key := Feature(k)
 		versionedSpecs, ok := known[key]
 		if !ok {
-			// early return if encounters an unknown feature.
-			errs = append(errs, fmt.Errorf("unrecognized feature gate: %s", k))
-			return errs
+			klog.Warningf("unrecognized feature gate: %s", k)
+			continue
 		}
 		featureSpec := featureSpecAtEmulationVersion(versionedSpecs, emulationVersion)
 		if featureSpec.LockToDefault && featureSpec.Default != v {
diff --git a/staging/src/k8s.io/component-base/featuregate/feature_gate_test.go b/staging/src/k8s.io/component-base/featuregate/feature_gate_test.go
index b0e0413dcd4..3d4b0ddbce8 100644
--- a/staging/src/k8s.io/component-base/featuregate/feature_gate_test.go
+++ b/staging/src/k8s.io/component-base/featuregate/feature_gate_test.go
@@ -88,7 +88,7 @@ func TestFeatureGateFlag(t *testing.T) {
 				testBetaGate:        false,
 				testLockedFalseGate: false,
 			},
-			parseError: "unrecognized feature gate: fooBarBaz",
+			//parseError: "unrecognized feature gate: fooBarBaz",
 		},
 		{
 			arg: "AllAlpha=false",
@@ -417,7 +417,7 @@ func TestFeatureGateSetFromMap(t *testing.T) {
 				testAlphaGate: false,
 				testBetaGate:  false,
 			},
-			setmapError: "unrecognized feature gate:",
+			//setmapError: "unrecognized feature gate:",
 		},
 		{
 			name: "set locked gates",
@@ -764,7 +764,7 @@ func TestVersionedFeatureGateFlag(t *testing.T) {
 				testAlphaGateNoVersion: false,
 				testBetaGateNoVersion:  false,
 			},
-			parseError: "unrecognized feature gate: fooBarBaz",
+			// parseError: "unrecognized feature gate: fooBarBaz",
 		},
 		{
 			arg: "AllAlpha=false",
@@ -1047,8 +1047,12 @@ func TestVersionedFeatureGateFlag(t *testing.T) {
 				errs = append(errs, err)
 			}
 			err = utilerrors.NewAggregate(errs)
+			strErr := ""
+			if err != nil {
+				strErr = err.Error()
+			}
 			if test.parseError != "" {
-				if !strings.Contains(err.Error(), test.parseError) {
+				if !strings.Contains(strErr, test.parseError) {
 					t.Errorf("%d: Parse() Expected %v, Got %v", i, test.parseError, err)
 				}
 				return
@@ -1590,9 +1594,9 @@ func TestCopyKnownFeatures(t *testing.T) {
 	require.NoError(t, fcopy.Set("FeatureB=false"))
 	assert.True(t, f.Enabled("FeatureB"))
 	assert.False(t, fcopy.Enabled("FeatureB"))
-	if err := fcopy.Set("FeatureC=true"); err == nil {
-		t.Error("expected FeatureC not registered in the copied feature gate")
-	}
+	// if err := fcopy.Set("FeatureC=true"); err == nil {
+	// 	t.Error("expected FeatureC not registered in the copied feature gate")
+	// }
 }
 
 func TestExplicitlySet(t *testing.T) {
diff --git a/staging/src/k8s.io/component-base/featuregate/registry_test.go b/staging/src/k8s.io/component-base/featuregate/registry_test.go
index 0c362d0d81f..1df983ecb2f 100644
--- a/staging/src/k8s.io/component-base/featuregate/registry_test.go
+++ b/staging/src/k8s.io/component-base/featuregate/registry_test.go
@@ -261,7 +261,7 @@ func TestFlags(t *testing.T) {
 				"--emulated-version=test=2.7",
 				"--feature-gates=test:testD=true",
 			},
-			parseError: "unrecognized feature gate: testD",
+			// parseError: "unrecognized feature gate: testD",
 		},
 		{
 			name: "setting unknown component feature flag",
-- 
2.47.1

