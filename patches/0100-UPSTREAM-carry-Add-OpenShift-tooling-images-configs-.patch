From a0727a89ef611dcfe9e7838d45748c614d229ea9 Mon Sep 17 00:00:00 2001
From: Jan Safranek <jsafrane@redhat.com>
Date: Wed, 22 Jan 2025 09:59:33 +0100
Subject: [PATCH] UPSTREAM: <carry>: Add OpenShift tooling, images, configs and
 docs

---
 openshift-hack/cmd/k8s-tests-ext/k8s-tests.go | 34 ++++++++++++++++++-
 openshift-hack/e2e/annotate/rules.go          | 22 ++----------
 2 files changed, 35 insertions(+), 21 deletions(-)

diff --git a/openshift-hack/cmd/k8s-tests-ext/k8s-tests.go b/openshift-hack/cmd/k8s-tests-ext/k8s-tests.go
index 03b626a827a..cb7e6a9922f 100644
--- a/openshift-hack/cmd/k8s-tests-ext/k8s-tests.go
+++ b/openshift-hack/cmd/k8s-tests-ext/k8s-tests.go
@@ -2,13 +2,16 @@ package main
 
 import (
 	"flag"
-	"k8s.io/kubernetes/test/e2e/framework"
 	"os"
+	"reflect"
+
+	"k8s.io/kubernetes/test/e2e/framework"
 
 	"github.com/spf13/cobra"
 	"github.com/spf13/pflag"
 
 	"github.com/openshift-eng/openshift-tests-extension/pkg/cmd"
+	"github.com/openshift-eng/openshift-tests-extension/pkg/extension"
 	e "github.com/openshift-eng/openshift-tests-extension/pkg/extension"
 	"github.com/openshift-eng/openshift-tests-extension/pkg/extension/extensiontests"
 	g "github.com/openshift-eng/openshift-tests-extension/pkg/ginkgo"
@@ -18,6 +21,7 @@ import (
 	utilflag "k8s.io/component-base/cli/flag"
 	"k8s.io/component-base/logs"
 	"k8s.io/kubernetes/openshift-hack/e2e/annotate/generated"
+	"k8s.io/kubernetes/test/utils/image"
 
 	// initialize framework extensions
 	_ "k8s.io/kubernetes/test/e2e/framework/debug/init"
@@ -64,6 +68,12 @@ func main() {
 		Qualifiers: []string{`labels.exists(l, l == "Serial") && labels.exists(l, l == "Conformance")`},
 	})
 
+	for k, v := range image.GetOriginalImageConfigs() {
+		image := convertToImage(v)
+		image.Index = int(k)
+		kubeTestsExtension.RegisterImage(image)
+	}
+
 	//FIXME(stbenjam): what other suites does k8s-test contribute to?
 
 	// Build our specs from ginkgo
@@ -110,3 +120,25 @@ func main() {
 		os.Exit(1)
 	}
 }
+
+// convertToImages converts an image.Config to an extension.Image, which
+// can easily be serialized to JSON. Since image.Config has unexported fields,
+// reflection is used to read its values.
+func convertToImage(obj interface{}) extension.Image {
+	image := extension.Image{}
+	val := reflect.ValueOf(obj)
+	typ := reflect.TypeOf(obj)
+	for i := 0; i < val.NumField(); i++ {
+		structField := typ.Field(i)
+		fieldValue := val.Field(i)
+		switch structField.Name {
+		case "registry":
+			image.Registry = fieldValue.String()
+		case "name":
+			image.Name = fieldValue.String()
+		case "version":
+			image.Version = fieldValue.String()
+		}
+	}
+	return image
+}
diff --git a/openshift-hack/e2e/annotate/rules.go b/openshift-hack/e2e/annotate/rules.go
index a62f99f1fd9..df970e8325f 100644
--- a/openshift-hack/e2e/annotate/rules.go
+++ b/openshift-hack/e2e/annotate/rules.go
@@ -26,6 +26,8 @@ var (
 			`\[Feature:RelaxedDNSSearchValidation\]`,
 			`\[Feature:PodLogsQuerySplitStreams\]`,
 			`\[Feature:PodLifecycleSleepActionAllowZero\]`,
+			`\[Feature:volumegroupsnapshot\]`,      // disabled Beta
+			`\[Feature:OrderedNamespaceDeletion\]`, // disabled Beta
 		},
 		// tests for features that are not implemented in openshift
 		"[Disabled:Unimplemented]": {
@@ -173,26 +175,6 @@ var (
 
 			// https://issues.redhat.com/browse/OCPBUGS-17194
 			`\[sig-node\] ImageCredentialProvider \[Feature:KubeletCredentialProviders\] should be able to create pod with image credentials fetched from external credential provider`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-45214
-			// Even though this feature is not GA in k/k, it will be GA in OCP 4.19, so we should fix it and unskip this test
-			`\[Feature:volumegroupsnapshot\]`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-45273
-			`\[sig-network\] Services should implement NodePort and HealthCheckNodePort correctly when ExternalTrafficPolicy changes`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-45273
-			`\[sig-cli\] Kubectl Port forwarding Shutdown client connection while the remote stream is writing data to the port-forward connection port-forward should keep working after detect broken connection`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-45274
-			// https://github.com/kubernetes/kubernetes/issues/129056
-			`\[sig-node\] PodRejectionStatus Kubelet should reject pod when the node didn't have enough resource`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-45359
-			`\[Feature:RecoverVolumeExpansionFailure\]`,
-
-			// https://issues.redhat.com/browse/OCPBUGS-46477
-			`\[sig-storage\] In-tree Volumes \[Driver: azure-file\]`,
 		},
 		// tests that may work, but we don't support them
 		"[Disabled:Unsupported]": {
-- 
2.49.0

